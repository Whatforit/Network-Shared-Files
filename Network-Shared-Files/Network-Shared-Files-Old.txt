#include <iostream>
#include <fstream>
#include <vector>
using namespace std;
typedef unsigned char BYTE;

//Fileobj class with file name, file size, and file data as vector<BYTE>
class Fileobj
{
	public:
	string fileName;
	int fileSize;
	int chunkSize;
	vector<vector<BYTE>> fileChunks;
	vector<vector<BYTE>> hashChunks(vector<vector<BYTE>> chunks);
	Fileobj(string fileName, int fileSize, vector<vector<BYTE>> fileChunks, int chunkSize)
	{
		this->fileName = fileName;
		this->fileSize = fileSize;
		this->fileChunks = fileChunks;
		this->chunkSize = chunkSize;
	}
};


//open file
vector<BYTE> readFile(const char* fileName){
    // open the file:
    std::ifstream file(fileName, std::ios::binary);

    // Stop eating new lines in binary mode!!!
    file.unsetf(std::ios::skipws);

    // get its size:
    std::streampos fileSize;

    file.seekg(0, std::ios::end);
    fileSize = file.tellg();
    file.seekg(0, std::ios::beg);

    // reserve capacity
    std::vector<BYTE> vec;
    vec.reserve(fileSize);

    // read the data:
    vec.insert(vec.begin(),
        std::istream_iterator<BYTE>(file),
        std::istream_iterator<BYTE>());
	
	if (vec.size() % 8 != 0) {
		vec.resize(vec.size() + (8 - vec.size() % 8)); //pad with zeros to make it a multiple of 8
	}
	file.close();
    return vec;
}

vector<vector<BYTE>> chunkFile(vector<BYTE> filedata, int chunkSize){
	vector<vector<BYTE>> chunks;
	int j = 0;
	for(int i = 0; i < filedata.size(); i += chunkSize){
		vector<BYTE> chunk;
		for(int j = 0; j < chunkSize; j++){
			chunk.push_back(filedata[i+j]);
		}
		chunks.push_back(chunk);
	}
	return chunks;
}

//hash all the chunks
vector<vector<BYTE>> hashChunks(vector<vector<BYTE>> chunks){
	vector<vector<BYTE>> hashedChunks;
	for(int i = 0; i < chunks.size(); i++){
		vector<BYTE> hashedChunk = hash(chunks[i]);
		hashedChunks.push_back(hashedChunk);
	}
	return hashedChunks;
}

Fileobj newFile(const char* fileName, int chunkSize) {
	vector<vector<BYTE>> fileChunks = chunkFile(readFile(fileName), chunkSize);
	Fileobj file(fileName, fileChunks.size(), fileChunks, chunkSize);
    return file;
}

int main() {
	Fileobj file = newFile("C:\\Users\\whatf\\Desktop\\test.txt", 8);
	cout << file.fileName << endl;
	cout << file.fileSize << endl;
	for (int i = 0; i < file.fileChunks.size(); i++) {
		for (int j = 0; j < file.fileChunks[i].size(); j++) {
			cout << hex << (int)file.fileChunks[i][j] << " ";
		}
	}
	return 0;
}